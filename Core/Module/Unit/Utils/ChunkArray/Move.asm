
                ifndef _CORE_MODULE_UTILS_CHUNK_ARRAY_MOVE_
                define _CORE_MODULE_UTILS_CHUNK_ARRAY_MOVE_
; -----------------------------------------
; переместить значение в другой чанк
; In:
;   HL - адрес массива чанков
;   A  - перемещяемое значение
;   D  - номер чанка назначения [0..127]
;   E  - номер чанка источника  [0..127]
;   BC - размер массива чанков
; Out:
; Corrupt:
; Note:
; -----------------------------------------
Move:           PUSH DE                                                         ; сохранение чанков

                ; -----------------------------------------
                ; поиск текущего юнита в массиве
                ; -----------------------------------------
                ifdef _OPTIMIZE
                EX AF, AF'                                                      ; сохранение искомого значения
                LD A, E
                LD L, #80
                CALL GetAddress

                ; подготовка поиска переносимого элемента
                LD C, (HL)                                                      ; количество элементов в старом чанке
                LD L, A
                DEC C
                JR Z, .Memmove                                                  ; переход, если 1 элемент в чанке (поиск не требуется)

                ; поиск перемещяемого значения
                INC C
                EX AF, AF'                                                      ; восстановление искомого значения
                endif

                CPIR
                DEBUG_BREAK_POINT_NZ                                            ; произошла ошибка!
                DEC L
.Memmove        LD E, L

                ; -----------------------------------------
                ; расчёт адреса вставки
                ; -----------------------------------------
                LD A, D
                LD L, #80
                CALL GetAddress
                LD L, A

                ; определение прямого или обратного сдвига
                SUB E
                JR Z, .Counter                                                  ; переход, если ID не перемещается 
                                                                                ; сдвиг не требуется, только изменение счётчиков
                JR C, .IsReverse

                ; -----------------------------------------
                ; прямой сдвиг
                ; -----------------------------------------
                
                DEC A
                JR Z, .Counter                                                  ; переход, если ID не перемещается 
                                                                                ; сдвиг не требуется, только изменение счётчиков

.IsForward      ; прямой сдвиг
                LD C, A
                LD L, E
                LD D, H
                INC L
                LD A, (DE)
                LDIR
                LD (DE), A
                JR .Counter

.IsReverse      ; -----------------------------------------
                ; обратный сдвиг
                ; -----------------------------------------
                NEG
                LD C, A
                LD L, E
                LD D, H
                DEC L
                LD A, (DE)
                LDDR
                LD (DE), A
                LD H, D

.Counter        ; -----------------------------------------
                ; смена счётчиков
                ; -----------------------------------------
                POP DE                                                          ; восстановление номеров чанков
                LD L, D
                SET 7, L
                INC (HL)
                LD L, E
                SET 7, L
                DEC (HL)
                RET

                endif ; ~ _CORE_MODULE_UTILS_CHUNK_ARRAY_MOVE_
